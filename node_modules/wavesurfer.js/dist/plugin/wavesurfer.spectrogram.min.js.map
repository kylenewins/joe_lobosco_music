{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/./src/plugin/spectrogram/index.js","webpack://WaveSurfer.[name]/./src/plugin/spectrogram/fft.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SpectrogramPlugin","params","ws","wavesurfer","util","frequenciesDataUrl","_onScroll","e","updateScroll","_onRender","render","_onWrapperClick","_wrapperClickHandler","_onReady","drawer","container","document","querySelector","Error","colorMap","length","val","push","width","pixelRatio","fftSamples","height","noverlap","windowFunc","alpha","createWrapper","createCanvas","wrapper","addEventListener","on","deferInit","staticProps","FFT","instance","isReady","once","unAll","un","removeEventListener","parentNode","removeChild","prevSpectrogram","wsParams","createElement","labels","labelsEl","classList","add","style","left","position","zIndex","appendChild","loadLabels","display","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","overflowY","event","preventDefault","relX","offsetX","layerX","fireEvent","canvas","spectrCc","getContext","updateCanvasStyle","loadFrequenciesData","getFrequencies","drawSpectrogram","Math","round","frequenciesData","my","backend","getDuration","j","pixels","resample","heightFactor","buffer","numberOfChannels","fillStyle","fillRect","callback","channelOne","getChannelData","bufferLength","sampleRate","frequencies","uniqueSamplesPerPx","max","fft","currentOffset","floor","segment","slice","spectrum","calculateSpectrum","array","Uint8Array","log10","url","request","fetchFile","data","JSON","parse","freq","toFixed","bgFill","fontSizeFreq","fontSizeUnit","fontType","textColorFreq","textColorUnit","textAlign","getMaxY","labelIndex","step","ac","ctx","fill","textBaseline","label","freqType","units","unitType","y","font","fillText","x","scrollLeft","target","oldMatrix","columnsNumber","newMatrix","oldPiece","newPiece","column","Array","oldStart","oldEnd","newStart","newEnd","overlap","min","k","intColumn","bufferSize","bandwidth","sinTable","Float32Array","cosTable","windowValues","reverseTable","Uint32Array","peakBand","peak","abs","cos","PI","pow","E","undefined","sin","limit","bit","rval","ival","mag","real","imag","bSi","sqrt","log","LN2","phaseShiftStepReal","phaseShiftStepImag","currentPhaseShiftReal","currentPhaseShiftImag","off","tr","ti","tmpReal","halfSize","fftStep","N"],"mappings":"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","file":"wavesurfer.spectrogram.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"spectrogram\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectrogram\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"spectrogram\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"localhost:8080/dist/plugin/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/* eslint-enable complexity, no-redeclare, no-var, one-var */\n\nimport FFT from './fft';\n\n/**\n * @typedef {Object} SpectrogramPluginParams\n * @property {string|HTMLElement} container Selector of element or element in\n * which to render\n * @property {number} fftSamples=512 Number of samples to fetch to FFT. Must be\n * a power of 2.\n * @property {boolean} labels Set to true to display frequency labels.\n * @property {number} noverlap Size of the overlapping window. Must be <\n * fftSamples. Auto deduced from canvas size by default.\n * @property {string} windowFunc='hann' The window function to be used. One of\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\n * @property {?number} alpha Some window functions have this extra value.\n * (Between 0 and 1)\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('spectrogram')`\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\n * Each entry should contain a float between 0 and 1 and specify\n * r, g, b, and alpha.\n */\n\n/**\n * Render a spectrogram visualisation of the audio.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\n *\n * // commonjs\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\n *\n * // if you are using <script> tags\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     SpectrogramPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class SpectrogramPlugin {\n    /**\n     * Spectrogram plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {SpectrogramPluginParams} params Parameters used to initialise the plugin\n     * @return {PluginDefinition} An object representing the plugin.\n     */\n    static create(params) {\n        return {\n            name: 'spectrogram',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                FFT: FFT\n            },\n            instance: SpectrogramPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = ws.util;\n\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\n        this._onScroll = e => {\n            this.updateScroll(e);\n        };\n        this._onRender = () => {\n            this.render();\n        };\n        this._onWrapperClick = e => {\n            this._wrapperClickHandler(e);\n        };\n        this._onReady = () => {\n            const drawer = (this.drawer = ws.drawer);\n\n            this.container =\n                'string' == typeof params.container\n                    ? document.querySelector(params.container)\n                    : params.container;\n\n            if (!this.container) {\n                throw Error('No container for WaveSurfer spectrogram');\n            }\n            if (params.colorMap) {\n                if (params.colorMap.length < 256) {\n                    throw new Error('Colormap must contain 256 elements');\n                }\n                for (let i = 0; i < params.colorMap.length; i++) {\n                    const cmEntry = params.colorMap[i];\n                    if (cmEntry.length !== 4) {\n                        throw new Error(\n                            'ColorMap entries must contain 4 values'\n                        );\n                    }\n                }\n                this.colorMap = params.colorMap;\n            } else {\n                this.colorMap = [];\n                for (let i = 0; i < 256; i++) {\n                    const val = (255 - i) / 256;\n                    this.colorMap.push([val, val, val, 1]);\n                }\n            }\n            this.width = drawer.width;\n            this.pixelRatio = this.params.pixelRatio || ws.params.pixelRatio;\n            this.fftSamples =\n                this.params.fftSamples || ws.params.fftSamples || 512;\n            this.height = this.fftSamples / 2;\n            this.noverlap = params.noverlap;\n            this.windowFunc = params.windowFunc;\n            this.alpha = params.alpha;\n\n            this.createWrapper();\n            this.createCanvas();\n            this.render();\n\n            drawer.wrapper.addEventListener('scroll', this._onScroll);\n            ws.on('redraw', this._onRender);\n        };\n    }\n\n    init() {\n        // Check if wavesurfer is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n        }\n    }\n\n    destroy() {\n        this.unAll();\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('redraw', this._onRender);\n        this.drawer && this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\n        this.wavesurfer = null;\n        this.util = null;\n        this.params = null;\n        if (this.wrapper) {\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\n            this.wrapper.parentNode.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    }\n\n    createWrapper() {\n        const prevSpectrogram = this.container.querySelector('spectrogram');\n        if (prevSpectrogram) {\n            this.container.removeChild(prevSpectrogram);\n        }\n        const wsParams = this.wavesurfer.params;\n        this.wrapper = document.createElement('spectrogram');\n        // if labels are active\n        if (this.params.labels) {\n            const labelsEl = (this.labelsEl = document.createElement('canvas'));\n            labelsEl.classList.add('spec-labels');\n            this.drawer.style(labelsEl, {\n                left: 0,\n                position: 'absolute',\n                zIndex: 9,\n                height: `${this.height / this.pixelRatio}px`,\n                width: `${55 / this.pixelRatio}px`\n            });\n            this.wrapper.appendChild(labelsEl);\n            this.loadLabels(\n                'rgba(68,68,68,0.5)',\n                '12px',\n                '10px',\n                '',\n                '#fff',\n                '#f7f7f7',\n                'center',\n                '#specLabels'\n            );\n        }\n\n        this.drawer.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: `${this.height / this.pixelRatio}px`\n        });\n\n        if (wsParams.fillParent || wsParams.scrollParent) {\n            this.drawer.style(this.wrapper, {\n                width: '100%',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            });\n        }\n        this.container.appendChild(this.wrapper);\n\n        this.wrapper.addEventListener('click', this._onWrapperClick);\n    }\n\n    _wrapperClickHandler(event) {\n        event.preventDefault();\n        const relX = 'offsetX' in event ? event.offsetX : event.layerX;\n        this.fireEvent('click', relX / this.width || 0);\n    }\n\n    createCanvas() {\n        const canvas = (this.canvas = this.wrapper.appendChild(\n            document.createElement('canvas')\n        ));\n\n        this.spectrCc = canvas.getContext('2d');\n\n        this.util.style(canvas, {\n            position: 'absolute',\n            zIndex: 4\n        });\n    }\n\n    render() {\n        this.updateCanvasStyle();\n\n        if (this.frequenciesDataUrl) {\n            this.loadFrequenciesData(this.frequenciesDataUrl);\n        } else {\n            this.getFrequencies(this.drawSpectrogram);\n        }\n    }\n\n    updateCanvasStyle() {\n        const width = Math.round(this.width / this.pixelRatio) + 'px';\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.canvas.style.width = width;\n    }\n\n    drawSpectrogram(frequenciesData, my) {\n        const spectrCc = my.spectrCc;\n        const length = my.wavesurfer.backend.getDuration();\n        const height = my.height;\n        const pixels = my.resample(frequenciesData);\n        const heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\n        let i;\n        let j;\n\n        for (i = 0; i < pixels.length; i++) {\n            for (j = 0; j < pixels[i].length; j++) {\n                const colorMap = my.colorMap[pixels[i][j]];\n                my.spectrCc.fillStyle =\n                    'rgba(' +\n                    colorMap[0] * 256 +\n                    ', ' +\n                    colorMap[1] * 256 +\n                    ', ' +\n                    colorMap[2] * 256 +\n                    ',' +\n                    colorMap[3] +\n                    ')';\n                my.spectrCc.fillRect(\n                    i,\n                    height - j * heightFactor,\n                    1,\n                    heightFactor\n                );\n            }\n        }\n    }\n\n    getFrequencies(callback) {\n        const fftSamples = this.fftSamples;\n        const buffer = (this.buffer = this.wavesurfer.backend.buffer);\n        const channelOne = buffer.getChannelData(0);\n        const bufferLength = buffer.length;\n        const sampleRate = buffer.sampleRate;\n        const frequencies = [];\n\n        if (!buffer) {\n            this.fireEvent('error', 'Web Audio buffer is not available');\n            return;\n        }\n\n        let noverlap = this.noverlap;\n        if (!noverlap) {\n            const uniqueSamplesPerPx = buffer.length / this.canvas.width;\n            noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\n        }\n\n        const fft = new FFT(\n            fftSamples,\n            sampleRate,\n            this.windowFunc,\n            this.alpha\n        );\n        const maxSlicesCount = Math.floor(\n            bufferLength / (fftSamples - noverlap)\n        );\n        let currentOffset = 0;\n\n        while (currentOffset + fftSamples < channelOne.length) {\n            const segment = channelOne.slice(\n                currentOffset,\n                currentOffset + fftSamples\n            );\n            const spectrum = fft.calculateSpectrum(segment);\n            const array = new Uint8Array(fftSamples / 2);\n            let j;\n            for (j = 0; j < fftSamples / 2; j++) {\n                array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\n            }\n            frequencies.push(array);\n            currentOffset += fftSamples - noverlap;\n        }\n        callback(frequencies, this);\n    }\n\n    loadFrequenciesData(url) {\n        const request = this.util.fetchFile({ url: url });\n\n        request.on('success', data =>\n            this.drawSpectrogram(JSON.parse(data), this)\n        );\n        request.on('error', e => this.fireEvent('error', e));\n\n        return request;\n    }\n\n    freqType(freq) {\n        return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\n    }\n\n    unitType(freq) {\n        return freq >= 1000 ? 'KHz' : 'Hz';\n    }\n\n    loadLabels(\n        bgFill,\n        fontSizeFreq,\n        fontSizeUnit,\n        fontType,\n        textColorFreq,\n        textColorUnit,\n        textAlign,\n        container\n    ) {\n        const frequenciesHeight = this.height;\n        bgFill = bgFill || 'rgba(68,68,68,0)';\n        fontSizeFreq = fontSizeFreq || '12px';\n        fontSizeUnit = fontSizeUnit || '10px';\n        fontType = fontType || 'Helvetica';\n        textColorFreq = textColorFreq || '#fff';\n        textColorUnit = textColorUnit || '#fff';\n        textAlign = textAlign || 'center';\n        container = container || '#specLabels';\n        const bgWidth = 55;\n        const getMaxY = frequenciesHeight || 512;\n        const labelIndex = 5 * (getMaxY / 256);\n        const freqStart = 0;\n        const step =\n            (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) /\n            labelIndex;\n\n        // prepare canvas element for labels\n        const ctx = this.labelsEl.getContext('2d');\n        this.labelsEl.height = this.height;\n        this.labelsEl.width = bgWidth;\n\n        // fill background\n        ctx.fillStyle = bgFill;\n        ctx.fillRect(0, 0, bgWidth, getMaxY);\n        ctx.fill();\n        let i;\n\n        // render labels\n        for (i = 0; i <= labelIndex; i++) {\n            ctx.textAlign = textAlign;\n            ctx.textBaseline = 'middle';\n\n            const freq = freqStart + step * i;\n            const index = Math.round(\n                (freq / (this.sampleRate / 2)) * this.fftSamples\n            );\n            const label = this.freqType(freq);\n            const units = this.unitType(freq);\n            const yLabelOffset = 2;\n            const x = 16;\n            let y;\n\n            if (i == 0) {\n                y = getMaxY + i - 10;\n                // unit label\n                ctx.fillStyle = textColorUnit;\n                ctx.font = fontSizeUnit + ' ' + fontType;\n                ctx.fillText(units, x + 24, y);\n                // freq label\n                ctx.fillStyle = textColorFreq;\n                ctx.font = fontSizeFreq + ' ' + fontType;\n                ctx.fillText(label, x, y);\n            } else {\n                y = getMaxY - i * 50 + yLabelOffset;\n                // unit label\n                ctx.fillStyle = textColorUnit;\n                ctx.font = fontSizeUnit + ' ' + fontType;\n                ctx.fillText(units, x + 24, y);\n                // freq label\n                ctx.fillStyle = textColorFreq;\n                ctx.font = fontSizeFreq + ' ' + fontType;\n                ctx.fillText(label, x, y);\n            }\n        }\n    }\n\n    updateScroll(e) {\n        if (this.wrapper) {\n            this.wrapper.scrollLeft = e.target.scrollLeft;\n        }\n    }\n\n    resample(oldMatrix) {\n        const columnsNumber = this.width;\n        const newMatrix = [];\n\n        const oldPiece = 1 / oldMatrix.length;\n        const newPiece = 1 / columnsNumber;\n        let i;\n\n        for (i = 0; i < columnsNumber; i++) {\n            const column = new Array(oldMatrix[0].length);\n            let j;\n\n            for (j = 0; j < oldMatrix.length; j++) {\n                const oldStart = j * oldPiece;\n                const oldEnd = oldStart + oldPiece;\n                const newStart = i * newPiece;\n                const newEnd = newStart + newPiece;\n\n                const overlap =\n                    oldEnd <= newStart || newEnd <= oldStart\n                        ? 0\n                        : Math.min(\n                            Math.max(oldEnd, newStart),\n                            Math.max(newEnd, oldStart)\n                        ) -\n                        Math.max(\n                            Math.min(oldEnd, newStart),\n                            Math.min(newEnd, oldStart)\n                        );\n                let k;\n                /* eslint-disable max-depth */\n                if (overlap > 0) {\n                    for (k = 0; k < oldMatrix[0].length; k++) {\n                        if (column[k] == null) {\n                            column[k] = 0;\n                        }\n                        column[k] += (overlap / newPiece) * oldMatrix[j][k];\n                    }\n                }\n                /* eslint-enable max-depth */\n            }\n\n            const intColumn = new Uint8Array(oldMatrix[0].length);\n            let m;\n\n            for (m = 0; m < oldMatrix[0].length; m++) {\n                intColumn[m] = column[m];\n            }\n\n            newMatrix.push(intColumn);\n        }\n\n        return newMatrix;\n    }\n}\n","/* eslint-disable complexity, no-redeclare, no-var, one-var */\n\n/**\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\n *\n * @param {Number} bufferSize Buffer size\n * @param {Number} sampleRate Sample rate\n * @param {Function} windowFunc Window function\n * @param {Number} alpha Alpha channel\n */\nexport default function FFT(bufferSize, sampleRate, windowFunc, alpha) {\n    this.bufferSize = bufferSize;\n    this.sampleRate = sampleRate;\n    this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\n\n    this.sinTable = new Float32Array(bufferSize);\n    this.cosTable = new Float32Array(bufferSize);\n    this.windowValues = new Float32Array(bufferSize);\n    this.reverseTable = new Uint32Array(bufferSize);\n\n    this.peakBand = 0;\n    this.peak = 0;\n\n    var i;\n    switch (windowFunc) {\n        case 'bartlett':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    (2 / (bufferSize - 1)) *\n                    ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\n            }\n            break;\n        case 'bartlettHann':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    0.62 -\n                    0.48 * Math.abs(i / (bufferSize - 1) - 0.5) -\n                    0.38 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\n            }\n            break;\n        case 'blackman':\n            alpha = alpha || 0.16;\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    (1 - alpha) / 2 -\n                    0.5 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1)) +\n                    (alpha / 2) *\n                        Math.cos((4 * Math.PI * i) / (bufferSize - 1));\n            }\n            break;\n        case 'cosine':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.cos(\n                    (Math.PI * i) / (bufferSize - 1) - Math.PI / 2\n                );\n            }\n            break;\n        case 'gauss':\n            alpha = alpha || 0.25;\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = Math.pow(\n                    Math.E,\n                    -0.5 *\n                        Math.pow(\n                            (i - (bufferSize - 1) / 2) /\n                                ((alpha * (bufferSize - 1)) / 2),\n                            2\n                        )\n                );\n            }\n            break;\n        case 'hamming':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    0.54 -\n                    0.46 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\n            }\n            break;\n        case 'hann':\n        case undefined:\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i) / (bufferSize - 1)));\n            }\n            break;\n        case 'lanczoz':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    Math.sin(Math.PI * ((2 * i) / (bufferSize - 1) - 1)) /\n                    (Math.PI * ((2 * i) / (bufferSize - 1) - 1));\n            }\n            break;\n        case 'rectangular':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] = 1;\n            }\n            break;\n        case 'triangular':\n            for (i = 0; i < bufferSize; i++) {\n                this.windowValues[i] =\n                    (2 / bufferSize) *\n                    (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\n            }\n            break;\n        default:\n            throw Error(\"No such window function '\" + windowFunc + \"'\");\n    }\n\n    var limit = 1;\n    var bit = bufferSize >> 1;\n    var i;\n\n    while (limit < bufferSize) {\n        for (i = 0; i < limit; i++) {\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n        }\n\n        limit = limit << 1;\n        bit = bit >> 1;\n    }\n\n    for (i = 0; i < bufferSize; i++) {\n        this.sinTable[i] = Math.sin(-Math.PI / i);\n        this.cosTable[i] = Math.cos(-Math.PI / i);\n    }\n\n    this.calculateSpectrum = function(buffer) {\n        // Locally scope variables for speed up\n        var bufferSize = this.bufferSize,\n            cosTable = this.cosTable,\n            sinTable = this.sinTable,\n            reverseTable = this.reverseTable,\n            real = new Float32Array(bufferSize),\n            imag = new Float32Array(bufferSize),\n            bSi = 2 / this.bufferSize,\n            sqrt = Math.sqrt,\n            rval,\n            ival,\n            mag,\n            spectrum = new Float32Array(bufferSize / 2);\n\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n\n        if (Math.pow(2, k) !== bufferSize) {\n            throw 'Invalid buffer size, must be a power of 2.';\n        }\n        if (bufferSize !== buffer.length) {\n            throw 'Supplied buffer is not the same size as defined FFT. FFT Size: ' +\n                bufferSize +\n                ' Buffer Size: ' +\n                buffer.length;\n        }\n\n        var halfSize = 1,\n            phaseShiftStepReal,\n            phaseShiftStepImag,\n            currentPhaseShiftReal,\n            currentPhaseShiftImag,\n            off,\n            tr,\n            ti,\n            tmpReal;\n\n        for (var i = 0; i < bufferSize; i++) {\n            real[i] =\n                buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\n            imag[i] = 0;\n        }\n\n        while (halfSize < bufferSize) {\n            phaseShiftStepReal = cosTable[halfSize];\n            phaseShiftStepImag = sinTable[halfSize];\n\n            currentPhaseShiftReal = 1;\n            currentPhaseShiftImag = 0;\n\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n                var i = fftStep;\n\n                while (i < bufferSize) {\n                    off = i + halfSize;\n                    tr =\n                        currentPhaseShiftReal * real[off] -\n                        currentPhaseShiftImag * imag[off];\n                    ti =\n                        currentPhaseShiftReal * imag[off] +\n                        currentPhaseShiftImag * real[off];\n\n                    real[off] = real[i] - tr;\n                    imag[off] = imag[i] - ti;\n                    real[i] += tr;\n                    imag[i] += ti;\n\n                    i += halfSize << 1;\n                }\n\n                tmpReal = currentPhaseShiftReal;\n                currentPhaseShiftReal =\n                    tmpReal * phaseShiftStepReal -\n                    currentPhaseShiftImag * phaseShiftStepImag;\n                currentPhaseShiftImag =\n                    tmpReal * phaseShiftStepImag +\n                    currentPhaseShiftImag * phaseShiftStepReal;\n            }\n\n            halfSize = halfSize << 1;\n        }\n\n        for (var i = 0, N = bufferSize / 2; i < N; i++) {\n            rval = real[i];\n            ival = imag[i];\n            mag = bSi * sqrt(rval * rval + ival * ival);\n\n            if (mag > this.peak) {\n                this.peakBand = i;\n                this.peak = mag;\n            }\n            spectrum[i] = mag;\n        }\n        return spectrum;\n    };\n}\n"],"sourceRoot":""}